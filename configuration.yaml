
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#  base_url: !secret domain
http:
  use_x_forwarded_for: true
  trusted_proxies: !secret reverse_proxies

# Text to speech
tts:
  - platform: google_translate

frontend:
  themes: !include_dir_merge_named themes

# discovery:
#   ignore:
#     - yeelight

api:

homeassistant:
  customize:
    switch.room_lights_neon_snake_power:
      assumed_state: false

alexa:
  smart_home:

yeelight:
  devices: !secret yeelight_devices_map

sensor:
  # Deluge
  - platform: deluge
    host: !secret chrononas_host
    username: nobody
    password: deluge
    monitored_variables:
      - 'current_status'
      - 'download_speed'
      - 'upload_speed'
# last.fm
  - platform: lastfm
    api_key: !secret api_key_lastfm
    users:
      - deathridge
#  # twitch
#  - platform: twitch
#    client_id: !secret api_key_twitch
#    channels:
#      - The8BitDrummer
#      - Cubeofwood
#      - ronnieradkeofficial

# openhardwaremonitor
  - platform: openhardwaremonitor
    host: !secret mintyprism_host
  # - platform: openhardwaremonitor
  #   host: !secret ah532_host
  # - platform: openhardwaremonitor
  #   host: !secret x230d_host
  
# lastfm attributes
  - platform: template
    sensors:
      last_scrobbled:
        friendly_name: "Last.fm last scrobbled"
        value_template: "{{ state_attr('sensor.deathridge', 'last_played') }}"
      top_track:
        friendly_name: "Last.fm top track"
        value_template: "{{ state_attr('sensor.deathridge', 'top_played') }}"
      total_scrobbles:
        friendly_name: "Last.fm total scrobbles"
        value_template: "{{ state_attr('sensor.deathridge', 'play_count') }}"

  - platform: template
    sensors:
      chronopod_last_muted:
        friendly_name: "chronopod last muted"
        value_template: "{{ relative_time(
        strptime(states.input_text.last_ir_mute_time.state, '%Y-%m-%d %H:%M:%S.%f%z' )
        ) }}"
      chronopod_last_poweroff:
        friendly_name: "chronopod last power off"
        value_template: "{{ relative_time(
        strptime(states.input_text.last_ir_power_time.state, '%Y-%m-%d %H:%M:%S.%f%z' )
        ) }}"

  - platform: template
    sensors:
      weather_temperature:
        friendly_name: "Weather forecast temperature"
        value_template: "{{ state_attr('weather.home', 'temperature') }}"


template:
  - sensor:
    - name: MintyPrism Last Online
      state: '{{ states.sensor.mintyprism_lastactive.last_changed }}'
      device_class: timestamp

switch:
  # Deluge
  - platform: deluge
    host: !secret chrononas_host
    username: nobody
    password: deluge
  - platform: wake_on_lan
    name: "AH532 WoL"
    mac: !secret ah532_mac
    host: !secret ah532_host
  - platform: wake_on_lan
    name: "LG WebOS WoL"
    mac: !secret lg_webos_mac
  - platform: wake_on_lan
    name: "MintyPrism WoL"
    mac: !secret mintyprism_mac
    turn_off:
      service: media_player.turn_off
      data:
        entity_id: media_player.lg_webos_smart_tv
    host: !secret lg_webos_host
  - platform: rest
    name: "ChronoPod Plexamp Service"
    resource: !secret chronopod_endpoint_plexamp
    body_on: '{"value": "on"}'
    body_off: '{"value": "off"}'
    is_on_template: '{{ value_json.running }}'
    headers:
      Content-Type: application/json
  - platform: template
    switches:
      mintymcu_desklight:
        value_template: "{{ is_state('light.mintyrgb_desklight', 'on') }}"
        turn_on:
          service: switch.toggle
          data:
            entity_id: switch.mintymcu_rgb_desklight_default_color
        turn_off:
          service: light.turn_off
          data:
            entity_id: light.mintyrgb_desklight
      room_lights_neon_snake_power:
        turn_on:
          - service: shell_command.pi3rf_snake_power
          - condition: state
            entity_id: binary_sensor.http_snake_light_sensor
            state: "off"
        turn_off:
          - service: shell_command.pi3rf_snake_power
          - condition: state
            entity_id: binary_sensor.http_snake_light_sensor
            state: "on"
        value_template: '{{ is_state("binary_sensor.http_snake_light_sensor","on") }}'
      room_lights_ceiling_inner:
        turn_on:
          - service: shell_command.pi3rf_ceiling_inner
          - condition: state
            entity_id: binary_sensor.http_ceiling_full_light_sensor
            state: "off"
        turn_off:
          - service: shell_command.pi3rf_ceiling_inner
          - condition: state
            entity_id: binary_sensor.http_ceiling_inner_light_sensor
            state: "on"
        value_template: '{{ is_state("binary_sensor.http_ceiling_inner_light_sensor","on") }}'
      room_lights_ceiling_outer:
        turn_on:
          - service: shell_command.pi3rf_ceiling_outer
          - condition: state
            entity_id: binary_sensor.http_ceiling_full_light_sensor
            state: "off"
        turn_off:
          - service: shell_command.pi3rf_ceiling_outer
          - condition: state
            entity_id: binary_sensor.http_ceiling_outer_light_sensor
            state: "on"
        value_template: '{{ is_state("binary_sensor.http_ceiling_outer_light_sensor","on") }}'
      room_lights_ceiling_full:
        turn_on:
          - service: shell_command.pi3rf_ceiling_full
          - condition: state
            entity_id: binary_sensor.http_ceiling_full_light_sensor
            state: "off"
        turn_off:
          - service: shell_command.pi3rf_ceiling_full
          - condition: state
            entity_id: binary_sensor.http_ceiling_full_light_sensor
            state: "on"
        value_template: '{{ is_state("binary_sensor.http_ceiling_full_light_sensor","on") }}'


shell_command:
  pi3rf_ceiling_inner: >
    ssh -i /config/access/id_rsa_pi3rf -o StrictHostKeyChecking=no -q euphemia@pi3rf.local
    sudo /usr/bin/sendiq -s 250000 -f 330.4500e6 -t u8 -i /home/euphemia/rpitx/codes/clipped/A_f330_4500e6_g45.iq
  pi3rf_ceiling_outer: >
    ssh -i /config/access/id_rsa_pi3rf -o StrictHostKeyChecking=no -q euphemia@pi3rf.local
    sudo /usr/bin/sendiq -s 250000 -f 330.4500e6 -t u8 -i /home/euphemia/rpitx/codes/clipped/B_f330_4500e6_g45.iq
  pi3rf_ceiling_full: >
    ssh -i /config/access/id_rsa_pi3rf -o StrictHostKeyChecking=no -q euphemia@pi3rf.local
    sudo /usr/bin/sendiq -s 250000 -f 330.4500e6 -t u8 -i /home/euphemia/rpitx/codes/clipped/C_f330_4500e6_g45.iq
  pi3rf_snake_power: >
    ssh -i /config/access/id_rsa_pi3rf -o StrictHostKeyChecking=no -q euphemia@pi3rf.local
    sudo /usr/bin/sendiq -s 250000 -f 433.9500e6 -t u8 -i /home/euphemia/rpitx/codes/clipped/snake_on_433_9500e6_g25.iq

binary_sensor:
  - platform: rest
    resource: !secret opencv_color_endpoint
    name: HTTP Snake Light sensor
    device_class: light
    value_template: '{{ value_json.snake }}'
    scan_interval: 10
  - platform: rest
    resource: !secret opencv_color_endpoint
    name: HTTP Ceiling Inner Light sensor
    device_class: light
    value_template: '{{ value_json.ceiling_inner }}'
    scan_interval: 10
  - platform: rest
    resource: !secret opencv_color_endpoint
    name: HTTP Ceiling Outer Light sensor
    device_class: light
    value_template: '{{ value_json.ceiling_outer }}'
    scan_interval: 10
  - platform: rest
    resource: !secret opencv_color_endpoint
    name: HTTP Ceiling Full Light sensor
    device_class: light
    value_template: '{{ value_json.ceiling_full }}'
    scan_interval: 10

input_number:
  # alsa volume control
  chronopod_volume:
    name: ChronoPod Volume Setting
    initial: 70
    min: 70
    max: 100
    step: 1
  mintymcu_panel_encoder_value_from:
    name: Panel Encoder State Before
    min: -100
    max: 100
    initial: 20
  mintymcu_panel_encoder_value_to:
    name: Panel Encoder State After
    min: -100
    max: 100
    initial: 20


input_boolean:
  chronopod_volume:
    name: Chronopod Volume Setting
    initial: off
  chronopod_plexamp_state:
    name: Chronopod Plexamp State
    initial: on
  chronopod_plexamp_reset_pause:
    name: Chronopod Reset Pause
    initial: off
  chronopod_bluetooth_discoverable:
    name: Chronopod Bluetooth Discoverable
    initial: off
  mintymcu_ir_mute:
    name: MintyMCU IR Mute
    initial: off
  mintymcu_ir_power:
    name: MintyMCU IR Power
    initial: on
  mintymcu_panel_encoder_value_increased:
    name: MintyPanel Encoder Value Increased
  mintymcu_panel_encoder_value_decreased:
    name: MintyPanel Encoder Value Decreased
  mintymcu_panel_encoder_recalibrate:
    name: MintyPanel Encoder Recalibration
  media_center_video_from_desktop:
    name: Media Center - Video - Desktop
    initial: off
  media_center_video_from_xbox:
    name: Media Center - Video - Xbox
    initial: off
  media_center_video_from_nintendo:
    name: Media Center - Video - Nintendo Switch
    initial: off
  media_center_video_from_receiver:
    name: Media Center - Video - Receiver
    initial: off
  media_center_app_spotify:
    name: Media Center - App - Spotify
    initial: off
  media_center_app_youtube:
    name: Media Center - App - YouTube
    initial: off
  media_center_app_plex:
    name: Media Center - App - Plex
    initial: off
  media_center_audio_vinyl:
    name: Media Center - Audio - Vinyl
    initial: off
  media_center_audio_keep_desktop:
    name: Media Center - Audio - Keep Desktop
    initial: off
  media_center_show_settings_speakers:
    name: Media Center - Speakers - Additional Settings
    initial: off
  media_center_show_settings_video:
    name: Media Center - Video - Additional Settings
    initial: off
  media_center_show_settings_receiver:
    name: Media Center - Receiver - Additional Settings
    initial: off

input_text:
  last_ir_mute_time:
    name: MintyMCU_IR Last Mute Trigger Time
  last_ir_power_time:
    name: MintyMCU_IR Last Power Trigger Time
  mintymcu_panel_button_command:
    name: Button pressed in panel

rest_command:
   amixer_volume_slider:
     url: !secret chronopod_endpoint_set_volume
     method: POST
     headers:
       accept: 'application/json'
     payload: '{"value": {{ states("input_number.chronopod_volume") }}}'
     content_type:  'application/json; charset=utf-8'
   amixer_volume_mute:
     url: !secret chronopod_endpoint_set_mute
     method: POST
     headers:
       accept: 'application/json'
     payload: '{"value": "{{ states("input_boolean.chronopod_volume") }}"}'
     content_type:  'application/json; charset=utf-8'
   plexamp_state_toggle:
     url: !secret chronopod_endpoint_set_plexamp_state
     method: POST
     headers:
       accept: 'application/json'
     payload: '{"value": "{{ states("input_boolean.chronopod_plexamp_state") }}"}'
     content_type:  'application/json; charset=utf-8'
   bluetoothctl_discoverable_toggle:
     url: !secret chronopod_endpoint_set_bluetooth_discoverable
     method: POST
     headers:
       accept: 'application/json'
     payload: '{"value": "{{ states("input_boolean.chronopod_bluetooth_discoverable") }}"}'
     content_type:  'application/json; charset=utf-8'

light:
  - platform: template
    lights:
      neon_snake_light:
        unique_id: "neon_snake_light"
        friendly_name: "Neon Snake (Light)"
        turn_on:
          service: shell_command.pi3rf_snake_power
        turn_off:
          service: shell_command.pi3rf_snake_power
      room_lights_ceiling_inner_light:
        unique_id: "room_lights_ceiling_inner_light"
        friendly_name: "Room Lights - Ceiling (inner) (Light)"
        turn_on:
          service: shell_command.pi3rf_ceiling_inner
        turn_off:
          service: shell_command.pi3rf_ceiling_inner
      room_lights_ceiling_outer_light:
        unique_id: "room_lights_ceiling_outer_light"
        friendly_name: "Room Lights - Ceiling (outer) (Light)"
        turn_on:
          service: shell_command.pi3rf_ceiling_outer
        turn_off:
          service: shell_command.pi3rf_ceiling_outer
      room_lights_ceiling_full_light:
        unique_id: "room_lights_ceiling_full_light"
        friendly_name: "Room Lights - Ceiling (full) (Light)"
        turn_on:
          - if:
              - alias: "If inner light is enabled"
                condition: state
                entity_id: light.room_lights_ceiling_inner_light
                state: on
              - alias: "If outer light is enabled"
                condition: state
                entity_id: light.room_lights_ceiling_outer_light
                state: on
            then:
              # - alias: "Disable full light"
              #   service: shell_command.pi3rf_ceiling_full
              - alias: "Change states for inner light"
                service: shell_command.pi3rf_ceiling_inner
              - alias: "Change states for outer light"
                service: shell_command.pi3rf_ceiling_outer
              - alias: "Stop ceiling full script"
              - stop: "Stop running ceiling light script"
                
          - if:
              - alias: "If inner light is enabled"
                condition: state
                entity_id: light.room_lights_ceiling_inner_light
                state: on
            then:
              - alias: "Disable inner light"
                service: shell_command.pi3rf_ceiling_inner
          - if:
              - alias: "If outer light is enabled"
                condition: state
                entity_id: light.room_lights_ceiling_outer_light
                state: on
            then:
              - alias: "Disable outer light"
                service: shell_command.pi3rf_ceiling_outer
            
            
            
          
          service: shell_command.pi3rf_ceiling_full
        turn_off:
          service: shell_command.pi3rf_ceiling_full
          
      
#   - platform: group
#     name: Room Lights Left
#     entities:
#       - light.room_lamp_left_1
#       - light.room_lamp_left_2
#       - light.room_lamp_left_3
#   - platform: group
#     name: Room Lights Right
#     entities:
#       - light.room_lamp_right_1
#       - light.room_lamp_right_2
#       - light.room_lamp_right_3
#   - platform: group
#     name: Room Lights
#     entities:
#       - light.room_lights_left
#       - light.room_lights_right

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
